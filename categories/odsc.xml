<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>decau.se (Posts about odsc)</title><link>https://decau.se/</link><description></description><atom:link href="https://decau.se/categories/odsc.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:decause@decau.se"&gt;decause&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Tue, 31 Dec 2024 04:36:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>interview-pamela-fox-curriculum-engineer-khan-academy</title><link>https://decau.se/blog/interview-pamela-fox-curriculum-engineer-khan-academy/</link><dc:creator>decause</dc:creator><description>&lt;h3&gt;Where are you from?&lt;/h3&gt;
&lt;p&gt;I was born in Los Angeles, grew up in upstate New York. My dad is a computer science professor at Syracuse University. My mom is a rocket science programmer. My dad is launching a "big data" MOOC, so we're both very interested in this field.&lt;/p&gt;
&lt;h3&gt;Where are you now?&lt;/h3&gt;
&lt;p&gt;Now, I work for Khan Academy in Mountainview California and live in San Francisco. I went back to the west coast as soon as I could and joined Google after graduation from University of Southern California in Los Angeles. I went to Australia, then got back to bay area three years ago. I was working on Google Maps API in Developer Relations, writing articles and demos, which is basically what I do now, but for non-proprietary technology.&lt;/p&gt;
&lt;p&gt;I first learned HTML in the 7th grade. Within a year, I made a website that taught HTML to other people called "htmlforkids" or something (even though I was a kid too.) That was probably my first "official" educational content. After that I was a computer camp counseler. In college, I organized workshops around 3D programming (started a SIGGRAPH chapter). I use Khan Academy to get better at math now.&lt;/p&gt;
&lt;h3&gt;Why free and open source software?&lt;/h3&gt;
&lt;p&gt;I really enjoy teaching, and I enjoy trying to figure out how to teach something. I find it fascinating when I put out new course, I read the comments and say, "Wow, I forgot what it was like not to know." I'm interested in humans, I read a lot about how humans work, and behavioral science. There is a lot of that in teaching people, is all about learning. I'm just learning.&lt;/p&gt;
&lt;p&gt;I'm generally a fan of open source, and that is another reason why I'm at Khan Academy, where we do that. As a web developer, I shouldn't have to reinvent the wheel. Often I say, "Really... really? I gotta solve this problem? I'm the only one that has ever tried to do this?" No, it's just someone didn't share it. Many of these components should be open source. Some people may say, "Well, we don't have jobs if we don't have to rewrite it." I don't want to believe that we live that way. I have friends with open source projects, who have tried to make money on it, doing enterprise versions, and getting paid for support. I'm always interested in the different ways of monetizing code. I feel like that part is still has open questions.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;I think we should encourage sharing, kids are used to the idea of "cheating." Someone copies your code, and they say, "Hey, that's cheating" and we have to tell them, "No, it's MIT Licensed, and it is open source."&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We have to teach them that sharing is OK. We have to do a better job of teaching open source and sharing, counter to what they may see in school. I'm upset there is no representation from the coding academies here at SIGCSE. They are trying to figure out how to get people ready for programming jobs in 12 weeks. I feel like I'm here representing that industry. Half engineer, half educator. I feel like I'm representing the "meritocracy" getting a real job thing too.&lt;/p&gt;
&lt;h3&gt;What can we do to improve computer education?&lt;/h3&gt;
&lt;p&gt;Coding academies are formed by people who learned alternatively, or didn't do well in college, and they are figuring out how to teach based on industry, and their good and bad experiences in college. They have good things to say about career oriented computer science education. They should be here (at SIGCSE) too. Girl Develop It, Women Who Code, they are all doing similar work, and they are disconnected from this world. I'm not just trying to do women-friendly hackathons but newbie-friendly hackathons too. More women are newbies than men right now, so if you fix things for newbies—people who are intimidated, who don't think of themselves as superstars—you fix it not only for women, but for men that have that same situation. Right now, we have to say "this is for women/girls" but the lines are getting increasingly blurred, and maybe we won't have to worry someday, but for now, we have to bring stuff up to parity good stuff.&lt;/p&gt;
&lt;p&gt;I'm quite interested in how we can prepare the next generation for the world with it's concerns about security and privacy. I like reading books like Little Brother by Cory Doctorow, which is a YA book that forces kids to think about these issues. I want to find a way to introduce the next generation to these issues and be relevant. If anyone has ideas on how to do that, I'd like to know.&lt;/p&gt;
&lt;div class="field field-name-field-lead-image field-type-image field-label-above"&gt;&lt;div class="field-label"&gt;Lead Image: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:contenturl"&gt;&lt;img alt="Share" height="292" src="http://opensource.com/sites/default/files/images/education/EDU_share_code_520x292_ma.png" title="Share" width="520"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-rating field-type-fivestar field-label-above"&gt;&lt;div class="field-label"&gt;Rating: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even"&gt;&lt;form accept-charset="UTF-8" action="http://opensource.com/user/10833/feed" class="fivestar-widget" id="fivestar-custom-widget" method="post"&gt;&lt;div&gt;&lt;div class="clearfix fivestar-average-text fivestar-average-stars fivestar-form-item fivestar-craft"&gt;&lt;div class="form-item form-type-fivestar form-item-vote"&gt;
 &lt;div class="form-item form-type-select form-item-vote"&gt;
 &lt;select class="form-select" id="edit-vote--2" name="vote"&gt;&lt;option value="-"&gt;Select rating&lt;/option&gt;&lt;option value="20"&gt;Give it 1/5&lt;/option&gt;&lt;option value="40"&gt;Give it 2/5&lt;/option&gt;&lt;option value="60"&gt;Give it 3/5&lt;/option&gt;&lt;option value="80"&gt;Give it 4/5&lt;/option&gt;&lt;option selected value="100"&gt;Give it 5/5&lt;/option&gt;&lt;/select&gt;
&lt;div class="description"&gt;&lt;div class="fivestar-summary fivestar-summary-average-count"&gt; &lt;span class="total-votes"&gt;(&lt;span&gt;8&lt;/span&gt; votes)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;input class="fivestar-submit form-submit" id="edit-fivestar-submit" name="op" type="submit" value="Rate"&gt;&lt;input name="form_build_id" type="hidden" value="form-zzUZGpMV4zC0P08Mefc-HLgbFysZUV8BcKFQRkejciY"&gt;
&lt;input name="form_id" type="hidden" value="fivestar_custom_widget"&gt;
&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-tags field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Tags: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/interview"&gt;interview&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item odd" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/khan-academy"&gt;Khan Academy&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/sigcse"&gt;SIGCSE&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item odd" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/computer-science"&gt;computer science&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/education"&gt;education&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-add-this field-type-addthis field-label-above"&gt;&lt;div class="field-label"&gt;Add This: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even"&gt;&lt;div class="addthis_toolbox addthis_default_style  "&gt;&lt;a class="addthis_button_twitter" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_reddit" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_stumbleupon" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_facebook" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_google_plusone" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-channel field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Channel: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:articlesection"&gt;&lt;a href="http://opensource.com/education"&gt;Education&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-article-type field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Article Type: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:learningresourcetype"&gt;&lt;a href="http://opensource.com/article-type/article"&gt;Article&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-default-license field-type-text field-label-above"&gt;&lt;div class="field-label"&gt;Default CC License: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even"&gt;&lt;a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license"&gt;
        &lt;img alt="Creative Commons License" src="http://opensource.com/sites/all/themes/opensource/images/cc-by-sa-4.png" style="border-width: 0;" title="This work is licensed under a Creative Commons Attribution-Share Alike 4.0 International License."&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;span class="rdf-meta" rel="schema:url"&gt;&lt;/span&gt;&lt;span class="rdf-meta"&gt;&lt;/span&gt;</description><category>odsc</category><guid>https://decau.se/blog/interview-pamela-fox-curriculum-engineer-khan-academy/</guid><pubDate>Fri, 06 Mar 2015 19:09:54 GMT</pubDate></item><item><title>jim-whitehurst-inspiration-open-source</title><link>https://decau.se/blog/jim-whitehurst-inspiration-open-source/</link><dc:creator>decause</dc:creator><description>&lt;input class="fivestar-submit form-submit" id="edit-fivestar-submit--4" name="op" type="submit" value="Rate"&gt;&lt;input name="form_build_id" type="hidden" value="form-bVqb6F_3IYo3y-tbxZPQNJBGbjBk-Md6cBAIXqBFH7E"&gt;
&lt;input name="form_id" type="hidden" value="fivestar_custom_widget"&gt;
&lt;div class="field field-name-field-tags field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Tags: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/open-source-business"&gt;open source business&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item odd" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/community-moderators"&gt;community moderators&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/opensourcecom"&gt;opensource.com&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item odd" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/jim-whitehurst"&gt;Jim Whitehurst&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/red-hat"&gt;red hat&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item odd" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/company"&gt;company&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/all-things-open"&gt;all things open&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item odd" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/meeting"&gt;meeting&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-add-this field-type-addthis field-label-above"&gt;&lt;div class="field-label"&gt;Add This: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even"&gt;&lt;div class="addthis_toolbox addthis_default_style  "&gt;&lt;a class="addthis_button_twitter" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_reddit" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_stumbleupon" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_facebook" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_google_plusone" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-channel field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Channel: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:articlesection"&gt;&lt;a href="http://opensource.com/business"&gt;Business&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-article-type field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Article Type: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:learningresourcetype"&gt;&lt;a href="http://opensource.com/article-type/article"&gt;Article&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-default-license field-type-text field-label-above"&gt;&lt;div class="field-label"&gt;Default CC License: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even"&gt;&lt;a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license"&gt;
        &lt;img alt="Creative Commons License" src="http://opensource.com/sites/all/themes/opensource/images/cc-by-sa-4.png" style="border-width: 0;" title="This work is licensed under a Creative Commons Attribution-Share Alike 4.0 International License."&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;span class="rdf-meta" rel="schema:url"&gt;&lt;/span&gt;&lt;span class="rdf-meta"&gt;&lt;/span&gt;</description><category>odsc</category><guid>https://decau.se/blog/jim-whitehurst-inspiration-open-source/</guid><pubDate>Tue, 09 Dec 2014 19:09:54 GMT</pubDate></item><item><title>interview-kyle-simpson-javascript</title><link>https://decau.se/blog/interview-kyle-simpson-javascript/</link><dc:creator>decause</dc:creator><description>&lt;div class="field field-name-body field-type-text-with-summary field-label-hidden"&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even"&gt;&lt;p&gt;In this interview, I take a deep dive into the life and motivations of &lt;a href="http://twitter.com/getify" target="_blank"&gt;Kyle Simpson&lt;/a&gt;, an open web evangelist and the author of the book on javascript, &lt;em&gt;&lt;a href="https://www.kickstarter.com/projects/getify/you-dont-know-js-book-series" target="_blank"&gt;You Don't Know JS&lt;/a&gt;&lt;/em&gt;. Find him &lt;a href="http://GitHub.com/getify" target="_blank"&gt;on GitHub&lt;/a&gt; and see his many projects and posts on &lt;a href="http://getify.me" target="_blank"&gt;Getify.me&lt;/a&gt;.&lt;/p&gt;
&lt;!--break--&gt;&lt;p&gt;&lt;img alt="" class="media-element file-default" height="88" src="http://opensource.com/sites/default/files/images/life/Interview%20banner%20Q%26A.png" title="" width="520"&gt;&lt;/p&gt;
&lt;h3&gt;Where are you from?&lt;/h3&gt;
&lt;p&gt;Oklahoma City, born and raised. Started school in Oklahoma, but now based in Austin, Texas—since mid-way through college. I live there with &lt;a href="http://twitter.com/mrsgetify" target="_blank"&gt;my wife&lt;/a&gt; and two kids. I moved to Austin because there wasn't much of a tech community in Oklahoma back in the 90s, and Austin was the nearest big tech hub. Now, I go back to Oklahoma to visit and see they have a &lt;a href="http://okcjs.com/" target="_blank"&gt;fantastic community&lt;/a&gt; there, and I'm jealous! It's great to see!&lt;/p&gt;
&lt;h3&gt;Where did you go to school?&lt;/h3&gt;
&lt;p&gt;I started at &lt;a href="https://www.ou.edu/" target="_blank"&gt;University of Oklahoma&lt;/a&gt;, then transferred to and graduated from &lt;a href="http://www.txstate.edu/" target="_blank"&gt;Texas State University&lt;/a&gt; with a B.S. in the engineering track of Computer Science.&lt;/p&gt;
&lt;h3&gt;What is your day-to-day like?&lt;/h3&gt;
&lt;p&gt;I have two different kinds of days; days where I speak/teach, and days where I do FOSS development. On teaching days, I'm connecting with community, and teaching JS to make a living—mostly in a corporate workshop environment, or public workshops associated with conferences. Those days I stand all day, and teach, and lecture, and walk people through exercises.&lt;/p&gt;
&lt;p&gt;When not on the road doing that, I'm participating in the FOSS community—writing code, or writing blogs, or books. I spend lots of time doing that, constantly on GitHub with commits and pull-requests flying everywhere. I currently have a &lt;a href="http://GitHub.com/getify" target="_blank"&gt;300+ day streak&lt;/a&gt; going on GitHub—not to show off—but to inspire others to do more, and more regularly, with FOSS contributions. If my streak can encourage one person do one extra contribution, that's what it's all about.&lt;/p&gt;
&lt;p&gt;The best way to describe it: 50% of my time I spend teaching to pay bills, and 50% donating time to the FOSS community, to build awareness around the web platform and its technology with the theory of "all boats rise with the tide." The more people who learn and appreciate web tech, the more people will hire me to teach it to them. I'm an avid learner of things, and the best way to learn is to teach others. I think "how can I make this make sense to others?" As soon as I learn something, I write code to explain it, find a book or post to describe it in, and if I find something I didn't understand, branch off, and learn more, then start the cycle again. It just gets deeper and deeper and deeper.&lt;/p&gt;
&lt;p&gt;I said a while back that, "I think it is important for developers, especially those breaking into industry, find &lt;strong&gt;ONE&lt;/strong&gt; thing you love to learn, and master it." It may not be the one thing you write all the rest of your code with, but &lt;em&gt;it is the process of sticking with something to mastery that is valuable&lt;/em&gt;. Don't just jump from thing to thing to thing. While you may get a good paycheck doing that, there is something missing from the art of deeply understanding something. Once you've accomplished that, and you know what there is to know, then branching out to try things is great! Be looking while you branch for that next thing you want to master, rinse, and repeat. Constant jumping around as a "jack-of-all-trades-master-of-none" was more relevant 5-10 years ago. What is missing now is people who &lt;strong&gt;really&lt;/strong&gt; know what they are doing.&lt;/p&gt;
&lt;p&gt;Our industry currently rewards "flexibility" and working at the whim of someone else. "Yesterday, we wrote everything in &lt;a href="http://angularjs.org" target="_blank"&gt;Angular&lt;/a&gt;, and today, we're going to rewrite everything in &lt;a href="https://facebook.github.io/react/" target="_blank"&gt;React&lt;/a&gt;..." After enough of those inflections, you "become" a senior developer, but you miss out on appreciating a technology in the way it really deserves with deep understanding.&lt;/p&gt;
&lt;h3&gt;Mastery? How?&lt;/h3&gt;
&lt;p&gt;Well, specific answers are variable. Angular will be much different than &lt;a href="http://nodejs.org" target="_blank"&gt;Node&lt;/a&gt;. In general, the important skill is the curiosity and desire to learn. Don't just read a line of code and say, "I guess that is just how it works..." Keep reading, and keep following the rabbit hole down until you can say you understand every part of that line of code. I tell my workshop attendees that I don't expect you'll write your own framework, but that you &lt;em&gt;could&lt;/em&gt;. Don't treat frameworks as black-boxes—you need to understand them intimately. If you choose something, know how it works but also &lt;strong&gt;WHY&lt;/strong&gt;. Knowing &lt;em&gt;when&lt;/em&gt; to change comes from understanding why—not because there is a great book, or how many "stars" the repo has. Those are poor signals. Beyond understanding of the open source community, your own understanding is the strongest signal.&lt;/p&gt;
&lt;p&gt;You don't have to reinvent the wheel, but you should understand how the wheel rolls before you decide to bolt it onto the car you're building.&lt;/p&gt;
&lt;h3&gt;How did you get started in FOSS?&lt;/h3&gt;
&lt;p&gt;I was working for a company, not as a developer, but as a "User Experience (UX) Architect." I worked in project management team prototyping User Interfaces (UIs), and handing them off to the dev team. Inevitably, everything I wrote was just put into production, or adapted slightly. I was working on a project in 2008 that needed to make cross domain &lt;a href="https://en.wikipedia.org/wiki/Ajax_%28programming%29" target="_blank"&gt;Ajax&lt;/a&gt; requests, and back then it was a real pain. I needed a solution to prove out my concept for the app, and I said, "I know some Flash, and I know that it can do that." So I built a JS API wrapper around an invisible flash file, with the same API as the XMLHttpRequest (Ajax) object, and I called the project &lt;a href="https://github.com/flensed/flXHR" target="_blank"&gt;flXHR&lt;/a&gt; (flash based XHR).&lt;/p&gt;
&lt;p&gt;Once I got it working, I thought, "Maybe other people will find it useful?" so, I released my code as open source. Back then, open source was pre-GitHub, so source was all on my website, and I pointed people at it from blog posts, etc. I also put code on &lt;a href="http://code.google.com" target="_blank"&gt;Google Code&lt;/a&gt; too, but there wasn't as much of a community back then either. In early 2009, I wanted to get into conference scene. 2009 was the first big JavaScript-specific conference, &lt;a href="http://jsconf.com/" target="_blank"&gt;JSConf&lt;/a&gt;, and so I decided to go and speak about &lt;a href="https://code.google.com/p/swfobject/" target="_blank"&gt;SWFObject&lt;/a&gt; (one of the most downloaded projects on the web at the time), which I was using heavily in flXHR. I was a core dev for SWFObject and gave a "B track" talk at the conference. Only like three people showed up to my first talk, but I fell in love with the idea that I could speak to call attention to open source code and inspire others to help make it better!&lt;/p&gt;
&lt;p&gt;The fullness of my open source perspective came later that year, in November of 2009. I released the project I'm probably most known for: &lt;a href="http://labjs.com/" target="_blank"&gt;LABjs&lt;/a&gt; (a performance-optimized dynamic script loader). I gave &lt;a href="http://lanyrd.com/2009/jsconfeu/scchq/" target="_blank"&gt;a talk&lt;/a&gt; at &lt;a href="http://2014.jsconf.eu/" target="_blank"&gt;JSConfEU&lt;/a&gt; in Berlin Germany about script loading. Two hours before going on stage, I was overhearing lots of people talking about this new site called GitHub, so I went and signed up while I was sitting &lt;em&gt;in&lt;/em&gt; the audience. I pushed all my LABjs code there, and that was my first official: "I am in the FOSS community" moment.&lt;/p&gt;
&lt;h3&gt;One thing you wish undergrads would be exposed to before the leave school?&lt;/h3&gt;
&lt;p&gt;Unquestionably, "&lt;a href="http://www.infoq.com/presentations/Simple-Made-Easy" target="_blank"&gt;Simple Made Easy&lt;/a&gt;," a conference talk by &lt;a href="http://twitter.com/richhickey" target="_blank"&gt;Rich Hickey&lt;/a&gt;, who works at &lt;a href="http://www.cognitect.com/" target="_blank"&gt;Cognitect&lt;/a&gt; on the &lt;a href="http://www.datomic.com/" target="_blank"&gt;Datomic&lt;/a&gt; database as well as the &lt;a href="http://clojure.org/" target="_blank"&gt;Clojure&lt;/a&gt; language. He's a completely brilliant dude. The talk is so important to me, I don't have just have it in a bookmark, but on my &lt;em&gt;toolbar&lt;/em&gt; and reference it practically daily. The premise is, there are two terms that people conflate: "simple" and "easy." He actually compares "complex" versus "hard." The root word for complex comes from "complected," as in strands of rope being braided together. Highly braided code is complex, and harder to maintain and refactor. Software developers, when building, they focus on building "easy" software—that is easy to install and use, and does a lot for you. That pursuit often results in complex software.&lt;/p&gt;
&lt;p&gt;If developers go after modular simple (non-complex), non-braided software, they can often end up with easy software too. If you go after easy, you usually end up with complex, but if you go after simple you can also achieve easy.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nodejs.org" target="_blank"&gt;Node.js&lt;/a&gt; is my example. I was trying to install it on a Virtual Machine, and had the operating system (OS) requirements, but couldn't install it because the OS didn't have the proper version of &lt;a href="http://python.org" target="_blank"&gt;Python&lt;/a&gt;. Node, a JavaScript framework, uses &lt;em&gt;Python&lt;/em&gt; for its installer? Why do I need Python to install Node??? The answer was because writing a cross-platform installer in Python was &lt;em&gt;easier&lt;/em&gt;... but when you add additional braiding, you can also make it more complex to implement and maintain.&lt;/p&gt;
&lt;p&gt;Nearly every framework on the planet claims to be modular, but most are not. Modular, to me, means that a piece could be removed, and the framework would still be able to be used. "Separate files" does not a modular framework make, if all those pieces are required for the framework to work! My goal, my desire, is that developers go after simple modular design, and that be the most important ethic. What comes from that then, is proper design that can be made easy for people to use. We need to stop worrying as much about creating pretty-looking, "easy" interfaces, and instead worry a lot more about making &lt;em&gt;simple&lt;/em&gt; software.&lt;/p&gt;
&lt;h3&gt;What is your toolchain?&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.sublimetext.com/" target="_blank"&gt;Sublime&lt;/a&gt; is my text editor. In principle, I love browser-based editing, but I run the nightly versions of my browsers, to find bugs early while I still have a chance to get them fixed. I can't handle browser crashing and uncertainty for when I'm writing code.&lt;/p&gt;
&lt;p&gt;Sublime has so many &lt;a href="https://sublime.wbond.net/" target="_blank"&gt;plugins&lt;/a&gt; you can use for whatever you want. Though I don't use many, other people like the "intellisense" plugins, and many other plugins that are part of a great ecosystem they've built.&lt;/p&gt;
&lt;p&gt;My other main tools are the browser developers tools in Firefox and &lt;a href="http://google.com/chrome" target="_blank"&gt;Chrome&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My other mission critical tool is the &lt;a href="http://git-scm.com/" target="_blank"&gt;Git&lt;/a&gt; command-line tool. GitHub is my graphical git client, because it effectively augments my usage of the git CLI.&lt;/p&gt;
&lt;h3&gt;Git. How do &lt;em&gt;you&lt;/em&gt; use it?&lt;/h3&gt;
&lt;p&gt;I don't have a lot of fancy process, it depends on whether I'm writing a book or writing code. For books, when I make a change, I want to write a coherent section, and make one commit per section. In the writing of one section, I may add to the Table of Contents, or clarify another section, or add another. Whenever I have a logical series of changes, I &lt;code&gt;git add&lt;/code&gt; each individual file, (files written in &lt;a href="https://en.wikipedia.org/wiki/Markdown" target="_blank"&gt;markdown&lt;/a&gt; BTW), and &lt;code&gt;git commit -m&lt;/code&gt;. In the commit message, I list which book the commit portrays to, which chapter(s), and a quick description of what it was about. The commit history of the book series really tells a story in and of itself, of how over months I figured out how to write them, section by section, reorganization by reorganization!&lt;/p&gt;
&lt;p&gt;I typically use &lt;code&gt;git commit -m ".." &amp;amp;&amp;amp; git push&lt;/code&gt;, so that I push right after committing.&lt;/p&gt;
&lt;p&gt;It is not often I do batch committing, usually only when I've been on an airplane without wifi for awhile, in which case I'll push 5-8 commits at a time once I get back online. Usually, I try to push right after I finish the section I'm working on.&lt;/p&gt;
&lt;p&gt;For code, I have two different strategies. If it is a "big" feature, I create a feature branch, and I put several commits into the feature branch. The goal isn't to finish the feature and do a massive merge, but to &lt;em&gt;regularly merge&lt;/em&gt;. I like to develop in stable batches, merge regularly, and don't do harm to master. If I do make a bugfix on master while developing a feature, I rebase the feature branch to get that fix in. I don't necessarily do short lived branches, but I do short lived differences. :)&lt;/p&gt;
&lt;p&gt;Many devs do squash merges, and want to appear to have "Dreamed up this perfect feature and written it perfectly all at once." I don't want that. I want to preserve the history. In rare cases with a pull-request that has lots of individual commits that are all logically connected, I'll do a squash-merge.&lt;/p&gt;
&lt;p&gt;In cases where I have a simple bug fix to make, I'll generally just add and commit directly to master. Regardless, Every time I'm doing the final commit, I'm committing both the docs and tests. I Firmly believe that it isn't &lt;strong&gt;DONE&lt;/strong&gt; until it has docs and tests. I don't really do Test Driven Development (TDD), but Test-oriented or Test-informed development. I have a set of tests, and sometimes they are written ahead, but the typical plan is "I don't know how it should behave" when I fix something with a new feature--it will take me working through implementation to know. I develop the tests along with the code--code &lt;em&gt;and&lt;/em&gt; test--rather than writing code after tests or the other way around.&lt;/p&gt;
&lt;p&gt;I'm much more formal when working on other peoples' projects, or as a bigger team. I try to stay away from scenarios where I need the complicated cherry-picking or interactive rebasing features of Git. I've done those things only a few times in my career. I use GitHub for most of those things, and it handles those cases pretty well. A pull-request with 2-3 commits, whatever their process was, is something that is useful to preserve in the history, so I'll usually just merge it as-is.&lt;/p&gt;
&lt;h3&gt;What are you currently working on?&lt;/h3&gt;
&lt;p&gt;Other than my books, I have three main areas of project interest I cycle through on any given week.&lt;/p&gt;
&lt;p&gt;Number 1 that gets most of my interest is asynchronous ("async") programming patterns (promises and generators, that sort of thing). I have a library called &lt;a href="https://github.com/getify/asynquence" target="_blank"&gt;asynquence&lt;/a&gt;, a promises-style asynchronous library. It can also handle generators, reactive sequences, and even CSP. (see: &lt;a href="https://en.wikipedia.org/wiki/Tony_Hoare" target="_blank"&gt;Hoare's&lt;/a&gt; seminal book "Communication Sequential Processes") with these higher-level patterns layered on top of the basic "sequence" abstraction. Most other libraries have just one flavor of async programming, but I've built one that can handle all the major patterns. I think async is one of the most important things that JS devs need to get up to speed on. I've got several conference talks and projects about that topic.&lt;/p&gt;
&lt;p&gt;We're recognizing more and more that sophisticated programs need more well-planned and capable async functionality. Callbacks alone don't really cut it anymore.&lt;/p&gt;
&lt;p&gt;[Remy Decausemaker: Yes, I reckon this jives well with &lt;a href="https://www.python.org/" target="_blank"&gt;Python&lt;/a&gt; incorporating &lt;a href="https://en.wikipedia.org/wiki/Tulip_%28python_project%29" target="_blank"&gt;Tulip&lt;/a&gt; and features from &lt;a href="https://twistedmatrix.com/trac" target="_blank"&gt;Twisted&lt;/a&gt; into the core library&lt;a href="http://legacy.python.org/dev/peps/pep-3156/" target="_blank"&gt;starting with Python 3.3&lt;/a&gt;.]&lt;/p&gt;
&lt;p&gt;Number 2 is in the same vein as the "compile to" languages for JS. Experimentation is important for the language. Taking that to it's extreme, I have a set of tools to define custom JS syntax and transpile to standard JS—basically, standard JS + custom syntax. I'm working on tools that do "little" transformations on your code. The bigger picture is "inversible transforms" or able to transformed in both directions, non-lossy transformations. If you can define them two-way, you can have your "view" for your own editor, and a "view" for the team repository. You check code in and out, and you can work on code the way &lt;em&gt;your&lt;/em&gt; brain works, and the team can work in the way their's does.&lt;/p&gt;
&lt;p&gt;When you use CoffeScript for example, it is a lossy transformation, and an "all or nothing" decision. Everyone needs to work on it in this way, or not at all. The simple version of what my tools can do is simple stylistic things like spaces versus tabs. The tools can change that code style for you instead of just complaining with errors.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getify/esre" target="_blank"&gt;ESRE&lt;/a&gt; is one such tool I'm building for two-way code-style transformation.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getify/let-er" target="_blank"&gt;let-er&lt;/a&gt; is another tool that transpiles a non-standard version of JS block-scoping into standard JS block-scoping. I have a series of in-progress prototypes of these various tools, and eventually I can go back and write the overall "meta" tool that drives them with the two-way transformations.&lt;/p&gt;
&lt;p&gt;Number 3 is a crossover between JS/CSS. It is a project in the templating world. There are two extremes in templating; zero-logic templating or full programming language templating. Zero-logic templating includes projects like Mustache. We don't want business logic in the views, so we use no logic at all. But in practice, this creates very brittle controller code that's closely tied to the structure of the UI, and that brittle connection is precisely what we wanted to avoid by keeping the concerns separate.&lt;/p&gt;
&lt;p&gt;The other extreme, is you have a full programming language in your templating. My metaphor is "if I hand you a pile of rope, I can teach you to build a rope-bridge, helpful, or a noose, which isn't quite so helpful." If you are in a "15-minute-must-do-feature crunch" you'll just drop in if-statements and function calls, and then put a TODO comment to fix it, but then you rarely do. That's how we unintentionally leak business logic into our views.&lt;/p&gt;
&lt;p&gt;Neither extreme is good enough. We need something in the middle, that has enough logic for structural UI construction, but keeps out all the mechanisms that you can &lt;em&gt;abuse&lt;/em&gt; to do business logic.&lt;/p&gt;
&lt;p&gt;For 4-5 years, I've experimented with a templating engine that is a happy medium, called &lt;a href="https://getify.github.io/grips/" target="_blank"&gt;grips&lt;/a&gt;. It has enough structural logic, but is restrained so that you can't do things like function calls, math, etc. It's mature enough that I use it in my projects and have rolled-out production websites with it. It is definitely a work-in-progress, but it is "stable enough" to be used. People still to bikeshed about the syntax for sure and may not like the choices I made. But I think I at least asked the right questions, like: What does a templating engine need or not need? I started with nothing and only added features when it was necessary to do structural stuff. You have basic looping and conditionals, but in limited fashion. I summarize that balance as, "if you find yourself unable to do something, it should be a signal that you don't need it in your templating engine."&lt;/p&gt;
&lt;p&gt;Two years ago, I started watching the rise of &lt;a href="http://lesscss.org/" target="_blank"&gt;LESS&lt;/a&gt;, &lt;a href="http://sass-lang.com/" target="_blank"&gt;SASS&lt;/a&gt;, and other tools like &lt;a href="http://compass-style.org/" target="_blank"&gt;COMPASS&lt;/a&gt;. What struck me was how limited they were in solving the problems I thought were important in &lt;a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets" target="_blank"&gt;CSS&lt;/a&gt; world. Those tools require the CSS to be recompiled every time you make a change. "Compile a HTML template, re-render with external data" is a solved problem. For some bizarre reason, it didn't occur with CSS though.&lt;/p&gt;
&lt;p&gt;So, I invented &lt;a href="https://github.com/getify/grips/tree/master/css#grips-css" target="_blank"&gt;grips-css&lt;/a&gt;, a CSS templating syntax similar to LESS, on top of the core grips templating engine. Most importantly with grips-css: data is external (i.e. CSS variables), which means all the data operations that projects like SASS are inventing declaritive syntax &lt;em&gt;inside&lt;/em&gt; of CSS to handle, instead you can and should do those data operations outside of CSS, producing new data and then just re-rendering the template.&lt;/p&gt;
&lt;p&gt;If I wanted to change "blue" to "red," I don't need to recompile all my CSS, I can take my pre-compiled CSS, and just re-render it with the different variable data.&lt;/p&gt;
&lt;p&gt;The compiled CSS template is basic JS, which means you have the option of re-rendering CSS dynamically in the browser on the fly, for example responding to changing conditions with CSS. It's much cleaner to simply re-render a snippet of CSS and inject it into the page than to use brittle JS code to change CSS style properties. Of course, you can also run grips-css on the server much like you currently do with current preprocesors. The point is you have both options with grips-css, instead of being limited to server-only and inefficient total recompilation. What I'm trying to do is suggest that the spirit of what SASS and the others are going for is &lt;strong&gt;good&lt;/strong&gt;, but the &lt;em&gt;way&lt;/em&gt; they are going about it is limited and not terribly healthy for the future of CSS.&lt;/p&gt;
&lt;p&gt;CSS templating is, I think, a much cleaner and more robust way to push CSS tooling capability forward.&lt;/p&gt;
&lt;h3&gt;You mentioned important problems to solve in CSS? What are they as far as you are concerned?&lt;/h3&gt;
&lt;p&gt;Three main things were solved in LESS. &lt;em&gt;Variable data&lt;/em&gt;, that can be changed and reused, structural things like mixins to achieve &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank"&gt;DRY&lt;/a&gt; coding. And, &lt;em&gt;extends&lt;/em&gt;, which is a light version of polymorphism to override pieces of templates. We needed to solve those things, and they did, but as I said, we solved this in text templating years ago, and we should apply those same principles from HTML/text templating to the world of CSS. There's no reason CSS needs to invent its own solutions for these problems.&lt;/p&gt;
&lt;h3&gt;So, what is next?&lt;/h3&gt;
&lt;p&gt;Putting on the "prognosticator hat," what do I think we'll see in the next 3-5 years?&lt;/p&gt;
&lt;p&gt;Applications are going to become "UI Optional." The new &lt;a href="https://www.apple.com/watch/" target="_blank"&gt;Apple Watch&lt;/a&gt; has a pretty limited display, and some apps won't show anything at all. Things like &lt;a href="https://www.google.com/glass/start/" target="_blank"&gt;Google Glass&lt;/a&gt;, or &lt;a href="http://www.oculus.com/" target="_blank"&gt;Oculus&lt;/a&gt;, you'll have apps that don't have &lt;strong&gt;any&lt;/strong&gt; visual representation at all. This is what I call the coming "APIs-as-Apps" era. Your "app" might be nothing more than a piece of code that can send and receive data—a distributed API. We have some companies that build apps that care &lt;strong&gt;greatly&lt;/strong&gt; about branding. &lt;a href="http://twitter.com" target="_blank"&gt;Twitter&lt;/a&gt; wanted you to experience their app the way &lt;em&gt;they&lt;/em&gt; wanted. &lt;a href="http://facebook.com" target="_blank"&gt;Facebook&lt;/a&gt; wanted you to experience the Facebook app the way &lt;em&gt;they&lt;/em&gt; wanted. But there is a reality that people will experience apps without your UI at all. Companies must give up control of the presentation, as our devices and interactions with them diversify from purely visual to audible or tactile interactions.&lt;/p&gt;
&lt;p&gt;My watch may read things to me without UI, and that is nothing more than a data operation. Facebook should provide the text for my watch to read to me. The UI doesn't necessarily go away, but it becomes an optional add-on to apps. In the longer term, I'd like to stress the decoupling more. We see people building single-page, complex, front-end driven apps. Most of the app is in the front-end. &lt;a href="http://mail.google.com" target="_blank"&gt;Gmail&lt;/a&gt; is cool to use, sure, but I don't think they are very flexible in that new optional-UI trend. It will be hard to separate &lt;em&gt;Gmail the App&lt;/em&gt; from &lt;em&gt;Gmail the UI&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Developers are making assumptions about access to unlimited, fast bandwidth with every retina image served up... We're not designing things in layers the way we know we should be. For all the people on slow connections it's just, "Meh, they'll get better access eventually." We need to give users tools in the browser to choose what is important to them. I should be able to say, "No, I don't want a huge single page Gmail app, I need a simple post-in-page mobile version." This is much more than just expecting a "mobile site." We need layered sites.&lt;/p&gt;
&lt;p&gt;We need to take a serious look at how much we assume that UIs and data bandwidth usage are an &lt;em&gt;unlimited resource&lt;/em&gt;. This could be like "responsive 2.0"—responsive not just to screen layout, but to network conditions too. The app should figure out that I am roaming and not shove everything at me it possibly can. UI needs to be decoupled, simplified, layered, and more focused on portable apps.&lt;/p&gt;
&lt;p&gt;I heard a conference talk years ago from &lt;a href="https://twitter.com/ppk" target="_blank"&gt;PPK&lt;/a&gt; (Peter Paul-Koch). He suggested, "Why is it I can't send a text to share an app with you? Why do you have to buy it from an app store?" He proposed that monetization would shift from the app to the data. He believes apps should be self-contained portable pieces of code that can be freely shared around regardless of device. JS is great for this because it is ubiquitous. For instance, if &lt;a href="http://facebook.com" target="_blank"&gt;Facebook&lt;/a&gt; wanted to charge me for data, because there was no UI on my device within which to serve ads to me, I should be able to decide if I want to pay them for the data of my updates.&lt;/p&gt;
&lt;p&gt;I hope that kind of thing represents the future of the web and the usage and consumption of apps.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-lead-image field-type-image field-label-above"&gt;&lt;div class="field-label"&gt;Lead Image: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:contenturl"&gt;&lt;img alt="Open source code for a better food system, code with grass image" height="292" src="http://opensource.com/sites/default/files/images/life/code_open_food_lead.jpg" title="Open source code for a better food system, code with grass image" width="520"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-rating field-type-fivestar field-label-above"&gt;&lt;div class="field-label"&gt;Rating: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even"&gt;&lt;form accept-charset="UTF-8" action="http://opensource.com/user/10833/feed" class="fivestar-widget" id="fivestar-custom-widget--3" method="post"&gt;&lt;div&gt;&lt;div class="clearfix fivestar-average-text fivestar-average-stars fivestar-form-item fivestar-craft"&gt;&lt;div class="form-item form-type-fivestar form-item-vote"&gt;
 &lt;div class="form-item form-type-select form-item-vote"&gt;
 &lt;select class="form-select" id="edit-vote--6" name="vote"&gt;&lt;option value="-"&gt;Select rating&lt;/option&gt;&lt;option value="20"&gt;Give it 1/5&lt;/option&gt;&lt;option value="40"&gt;Give it 2/5&lt;/option&gt;&lt;option value="60"&gt;Give it 3/5&lt;/option&gt;&lt;option value="80"&gt;Give it 4/5&lt;/option&gt;&lt;option selected value="100"&gt;Give it 5/5&lt;/option&gt;&lt;/select&gt;
&lt;div class="description"&gt;&lt;div class="fivestar-summary fivestar-summary-average-count"&gt; &lt;span class="total-votes"&gt;(&lt;span&gt;9&lt;/span&gt; votes)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;input class="fivestar-submit form-submit" id="edit-fivestar-submit--3" name="op" type="submit" value="Rate"&gt;&lt;input name="form_build_id" type="hidden" value="form-I46C3PAiMdKgPtPfrs6ReG3Vh2qaylocJeaXgm4DOZM"&gt;
&lt;input name="form_id" type="hidden" value="fivestar_custom_widget"&gt;
&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-tags field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Tags: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/open-source-software"&gt;open source software&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item odd" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/programming"&gt;programming&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/language"&gt;language&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item odd" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/javascript"&gt;Javascript&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/js"&gt;js&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-add-this field-type-addthis field-label-above"&gt;&lt;div class="field-label"&gt;Add This: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even"&gt;&lt;div class="addthis_toolbox addthis_default_style  "&gt;&lt;a class="addthis_button_twitter" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_reddit" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_stumbleupon" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_facebook" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_google_plusone" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-channel field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Channel: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:articlesection"&gt;&lt;a href="http://opensource.com/business"&gt;Business&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-article-type field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Article Type: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:learningresourcetype"&gt;&lt;a href="http://opensource.com/article-type/article"&gt;Article&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-default-license field-type-text field-label-above"&gt;&lt;div class="field-label"&gt;Default CC License: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even"&gt;&lt;a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license"&gt;
        &lt;img alt="Creative Commons License" src="http://opensource.com/sites/all/themes/opensource/images/cc-by-sa-4.png" style="border-width: 0;" title="This work is licensed under a Creative Commons Attribution-Share Alike 4.0 International License."&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;span class="rdf-meta" rel="schema:url"&gt;&lt;/span&gt;&lt;span class="rdf-meta"&gt;&lt;/span&gt;</description><category>odsc</category><guid>https://decau.se/blog/interview-kyle-simpson-javascript/</guid><pubDate>Wed, 12 Nov 2014 19:09:54 GMT</pubDate></item><item><title>head-of-open-source-facebook-oscon</title><link>https://decau.se/blog/head-of-open-source-facebook-oscon/</link><dc:creator>decause</dc:creator><description>&lt;input class="fivestar-submit form-submit" id="edit-fivestar-submit--7" name="op" type="submit" value="Rate"&gt;&lt;input name="form_build_id" type="hidden" value="form-LJSsnl3l8a8D6Ql_vvaDmESupZmfeS6yu7pBrnYeQag"&gt;
&lt;input name="form_id" type="hidden" value="fivestar_custom_widget"&gt;
&lt;div class="field field-name-field-tags field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Tags: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/open-source-software"&gt;open source software&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item odd" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/facebook"&gt;facebook&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/oscon"&gt;OSCON&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item odd" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/conference"&gt;conference&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item even" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/presentations"&gt;presentations&lt;/a&gt;&lt;/div&gt;&lt;div class="field-item odd" rel="schema:keywords"&gt;&lt;a href="http://opensource.com/tags/james-pearce"&gt;james pearce&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-add-this field-type-addthis field-label-above"&gt;&lt;div class="field-label"&gt;Add This: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even"&gt;&lt;div class="addthis_toolbox addthis_default_style  "&gt;&lt;a class="addthis_button_twitter" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_reddit" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_stumbleupon" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_facebook" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;a class="addthis_button_google_plusone" href="http://www.addthis.com/bookmark.php?v=300"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-channel field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Channel: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:articlesection"&gt;&lt;a href="http://opensource.com/business"&gt;Business&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-article-type field-type-taxonomy-term-reference field-label-above"&gt;&lt;div class="field-label"&gt;Article Type: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even" rel="schema:learningresourcetype"&gt;&lt;a href="http://opensource.com/article-type/article"&gt;Article&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="field field-name-field-default-license field-type-text field-label-above"&gt;&lt;div class="field-label"&gt;Default CC License: &lt;/div&gt;&lt;div class="field-items"&gt;&lt;div class="field-item even"&gt;&lt;a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license"&gt;
        &lt;img alt="Creative Commons License" src="http://opensource.com/sites/all/themes/opensource/images/cc-by-sa-4.png" style="border-width: 0;" title="This work is licensed under a Creative Commons Attribution-Share Alike 4.0 International License."&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;span class="rdf-meta" rel="schema:url"&gt;&lt;/span&gt;&lt;span class="rdf-meta"&gt;&lt;/span&gt;</description><category>odsc</category><guid>https://decau.se/blog/head-of-open-source-facebook-oscon/</guid><pubDate>Wed, 22 Oct 2014 19:09:54 GMT</pubDate></item></channel></rss>